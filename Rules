#!/usr/bin/env ruby

# compile rules determines how source files are compiled to other representation

compile '/sitemap.xml.erb' do
  filter :erb
  write '/sitemap.xml'
end

compile '/atom.xml.erb' do
  filter :erb
  write '/atom.xml'
end

compile '/**/*' do
  next if item.binary?

  case item[:extension]
    when "coffee"
      filter :coffeescript
    when "sass"
      filter :sass
    when "scss"
      filter :sass, :syntax => :scss
    when "md", "markdown"
      filter :kramdown, {
        :toc_levels           => "4..6",
        :coderay_css          => :class,
        :coderay_line_numbers => :table,
      }
      # filter :redcarpet, :options => { }, :renderer_options => {:with_toc_data=>true}, :renderer => ::Redcarpet::Render::HTML_TOC
    when "haml"
      filter :haml
    when 'css', "html", "js"
      # do nothing
    else
      raise "no compile rule for #{item.identifier.chop}.#{item[:extension]}"
    end

  if item[:no_layout]
  elsif %w/html haml markdown md/.include? item[:extension]
    layout "/default.*"
  end
end

# layout rule: how is compiled content embedeed into layouts
layout '/**/*.erb', :erb

# route rule: how content maps to output file
route '/**/*.{html,md,markdown,haml}' do
  case item.identifier.components.last
  when %r{\Aindex\.}
    # maps /aaa/index.markdown to /aaa/index.html
    [
      '',
      item.identifier.components[0..-2],
      'index.html'
    ].flatten.join('/')
  else
    # maps /aaa.markdown to /aaa/index.html
    item.identifier.without_exts + '/index.html'
  end
end

route '/**/*.{css,scss,sass}' do
  item.identifier.chop + '.css'
end

route '/**/*.{ts,js,coffee}' do
  item.identifier.chop + '.js'
end
